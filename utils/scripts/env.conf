# Colors
RED='\e[1;31m%s\e[0m'
GREEN='\e[1;32m%s\e[0m\n'
YELLOW='\e[1;33m%s\e[0m\n'
BLUE='\e[1;34m%s\e[0m\n'
MAGENTO='\e[1;35m%s\e[0m\n'
CYAN='\e[1;36m%s\e[0m\n'
WHITE='\e[1;37m%s\e[0m\n'

# Contracts Info
SPENDING_CONTRACT_NAME=Distro
MINTING_CONTRACT_NAME=Regulator

# Paths

SPENDING_CONTRACT="../../dist/build/contracts/"${SPENDING_CONTRACT_NAME}".plutus"
MINTING_CONTRACT="../../dist/build/contracts/"${MINTING_CONTRACT_NAME}".plutus"

TX_PATH=../../dist/data/transactions
DATUM_PATH=../../dist/data/datums
REDMMER_PATH=../../dist/data/redeemers
WALLET_PATH=../wallets

GENESIS_MINT_INLINE_DATUM=${DATUM_PATH}"/"${MINTING_CONTRACT_NAME}"/genesis_mint_inline_datum.json"
GENESIS_MINT_ACTION_REDEEMER=${REDMMER_PATH}"/"${MINTING_CONTRACT_NAME}"/genesis_mint_action_redeemer.json"
FIRST_DEVELOPER_ACTION_REDEEMER=${REDMMER_PATH}"/"${MINTING_CONTRACT_NAME}"/first_developer_action_redeemer.json"
SECOND_DEVELOPER_ACTION_REDEEMER=${REDMMER_PATH}"/"${MINTING_CONTRACT_NAME}"/second_developer_action_redeemer.json"
REGULATOR_DEBUGGER_ACTION_REDEEMER=${REDMMER_PATH}"/"${MINTING_CONTRACT_NAME}"/regulator_debugger_action_redeemer.json"

FIRST_DEV_CLAIM_AT_PHASE_ONE_DATUM=${DATUM_PATH}"/"${SPENDING_CONTRACT_NAME}"/first_dev_claim_at_phase_one_datum.json"
FIRST_DEV_CLAIM_AT_PHASE_TWO_DATUM=${DATUM_PATH}"/"${SPENDING_CONTRACT_NAME}"/first_dev_claim_at_phase_two_datum.json"
PHASE_ONE_CLAIMIG_TOKEN_REDEEMER=${REDMMER_PATH}"/"${SPENDING_CONTRACT_NAME}"/phase_one_claiming_token_redeemer.json"
PHASE_TWO_CLAIMIG_TOKEN_REDEEMER=${REDMMER_PATH}"/"${SPENDING_CONTRACT_NAME}"/phase_two_claiming_token_redeemer.json"
BURNING_GENESIS_TOKEN_REDEEMER=${REDMMER_PATH}"/"${SPENDING_CONTRACT_NAME}"/burning_genesis_token_redeemer.json"
DISTRO_DEBUGGER_ACTION_REDEEMER=${REDMMER_PATH}"/"${SPENDING_CONTRACT_NAME}"/distro_debugger_action_redeemer.json"

# Variables
MAGIC_TESTNET_NUMBER=1
HAPPY_TOKEN_POLICY_ID=$(cardano-cli transaction policyid --script-file ${MINTING_CONTRACT})

# Addresses
SPENDING_CONTRACT_ADDRESS=$(cardano-cli address build --payment-script-file ${SPENDING_CONTRACT} --testnet-magic ${MAGIC_TESTNET_NUMBER})
MINTING_CONTRACT_ADDRESS=$(cardano-cli address build --payment-script-file ${MINTING_CONTRACT} --testnet-magic ${MAGIC_TESTNET_NUMBER})
COLLATERAL_ADDRESS=$(cat ${WALLET_PATH}/collateral/collateral.1.0.TestnetDelegation.addr)
CONTRACT_REFERENCES_ADDRESS=$(cat ${WALLET_PATH}/contract_references/contract_references.1.0.TestnetDelegation.addr)
DEBUGGER_ADDRESS=$(cat ${WALLET_PATH}/debugger/debugger.1.0.TestnetDelegation.addr)
FIRST_DEVELOPER_ADDRESS=$(cat ${WALLET_PATH}/first_dev/first_dev.1.0.TestnetDelegation.addr)

# Payment PKH
COLLATERAL_PAYMENT_PKH=$(cat ${WALLET_PATH}/collateral/collateral.1.Payment.pkh)
CONTRACT_REF_PAYMENT_PKH=$(cat ${WALLET_PATH}/contract_references/contract_references.1.Payment.pkh)
DEBUGGER_PAYMENT_PKH=$(cat ${WALLET_PATH}/debugger/debugger.1.Payment.pkh)
FIRST_DEVELOPER_PKH=$(cat ${WALLET_PATH}/first_dev/first_dev.1.Payment.pkh)

# Payment Singing Key
COLLATERAL_PAYMENT_SKEY=${WALLET_PATH}/collateral/collateral.1.Payment.xsk
CONTRACT_REF_PAYMENT_SKEY=${WALLET_PATH}/contract_references/contract_references.1.Payment.xsk
DEBUGGER_PAYMENT_SKEY=${WALLET_PATH}/debugger/debugger.1.Payment.xsk
FIRST_DEVELOPER_PAYMENT_SKEY=${WALLET_PATH}/first_dev/first_dev.1.Payment.xsk

# Payment Verification Key
COLLATERAL_PAYMENT_VKEY=${WALLET_PATH}/collateral/collateral.1.Payment.xvk
CONTRACT_REF_PAYMENT_VKEY=${WALLET_PATH}/contract_references/contract_references.1.Payment.xvk
DEBUGGER_PAYMENT_VKEY=${WALLET_PATH}/debugger/debugger.1.Payment.xvk
FIRST_DEVELOPER_PAYMENT_VKEY=${WALLET_PATH}/first_dev/first_dev.1.Payment.xvk

# Ekival Minting Super Admin Auth Token
## 48415050595f544f4b454e
HAPPY_TOKEN_NAME=$(echo -n "HAPPY_TOKEN" | xxd -p)
HAPPY_TOKEN=${HAPPY_TOKEN_POLICY_ID}.${HAPPY_TOKEN_NAME}

# Helper Functions
check_process() {
    printf "$CYAN" "[$(date +%Y-%m-%d\ %H:%M:%S)] Checking If Process '$1' Exists..."
    [ "$1" = "" ] && return 0
    PROCESS_NUM=$(ps -ef | grep "$1" | grep -v "grep" | wc -l)
    if [ $PROCESS_NUM -eq 0 ]; then
        printf "\n$RED\n" "[-] ERROR: '$1' Is Not Running"
        exit
    fi
}

# # retrieve the amount of lovelace in the biggest (in amount of lovelace had) tx
# # $1 - address to lookup
get_address_biggest_lovelace() {
    cardano-cli query utxo --address $1 --testnet-magic ${MAGIC_TESTNET_NUMBER} | tail -n +3 | awk '{printf "%s#%s %s \n", $1 , $2, $3}' | sort -rn -k2 | head -n1 | awk '{print $1}'
}

# $1 is the token
get_distro_UTxO_by_token() {
    for i in {1..10}; do
        utxoAttachedHex=$(
            cardano-cli query utxo --address ${SPENDING_CONTRACT_ADDRESS} --testnet-magic ${MAGIC_TESTNET_NUMBER} |
                tail -n +3 |
                awk '{printf "%s\n",$7}' |
                sort -rn -k2 |
                head -n1 |
                awk -v i="$i" 'NR == i {printf("%s", $1)}'
        )
        if [ "$utxoAttachedHex" == "$1" ]; then
            cardano-cli query utxo --address ${SPENDING_CONTRACT_ADDRESS} --testnet-magic ${MAGIC_TESTNET_NUMBER} |
                tail -n +3 |
                awk '{printf "%s#%s\n",$1, $2}' |
                sort -rn -k2 |
                head -n1 |
                awk -v i="$i" 'NR == i {printf("%s", $1)}'
            return
        fi
    done
}

cardano-cli query utxo --address $(cardano-cli address build --payment-script-file ../../dist/build/contracts/Distro.plutus $MAGIC) $MAGIC | tail -n +3 | awk '{printf "%s\n",$6}' | sort -rn -k3 | awk 'NR == 3 {printf("%s", $1)}'
# cardano-cli query utxo --address $(cat ../../wallets/ekival_admin/ekival_admin.saddr) $MAGIC | tail -n +3 | awk '{printf "%s %s\n", $6, $7}' | sort -rn -k3 | awk 'NR == 3 {printf("%s", $2)}'
# cardano-cli query utxo --address $(cat ../../wallets/ekival_admin/ekival_admin.saddr) $MAGIC | tail -n +3 | awk '{printf "%s  %s#%s\n", $6, $1, $2}' | sort -rn -k3 | awk 'NR == 3 {printf("%s", $2)}'
