(programforce (force ((\ -> \ -> \ -> (\ -> (\ -> force  (\ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> (\ -> \ -> \ -> force (force  (\ -> delay (force  (\ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force (force ( ) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force (force ifThenElse (equalsInteger (  ) -1)  ) (delay ) (delay (force trace "Wrong Amount Minted By First Developer" )))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "First Developer Must Sign Tx" )))) (force  (force (force  (delay (force (force  (delay (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force ))))) (delay (force ))))) (delay (force )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (  1) (delay (force (force ( ( ) 0) (delay ) (delay (force ))))) (delay (force )))) (force ))))))))) (delay ) (delay (force trace "[ERROR]: FIRST DEVELOPER BURN GENESIS TOKEN" ))))) (delay error) (delay error) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force (force ifThenElse (equalsInteger (  ) -1)  ) (delay ) (delay (force trace "Wrong Amount Minted By Second Developer" )))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "Second Developer Must Sign Tx" )))) (force  (force (force  (delay (force (force  (delay (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force ))))) (delay (force ))))) (delay (force )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (  1) (delay (force (force ( ( ) 0) (delay ) (delay (force ))))) (delay (force )))) (force ))))))))) (delay ) (delay (force trace "[ERROR]: SECOND DEVELOPER BURN GENESIS TOKEN" ))))))))))) (delay (force (force ( (force  (\ -> \ -> )) ) (delay ) (delay (force trace "Distro Debugger Must Sign" ))))) (\ -> delay (force  (\ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force (force ) (\ -> \ -> \ -> \ -> force (force  (delay (force trace "The Output UTxO Does Not Have Inlineeee Datum" )) (\ -> delay (force ( ) (\ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force (force ( ) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force (force ifThenElse (equalsInteger (  ) )  ) (delay ) (delay (force trace "Wrong Amount Minted By First Developer" )))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "First Developer Must Sign Tx" )))) (force  (force (force  (delay (force trace "Phase One Tokens Were Minted By First Dev" )) (delay ))) (force  (force (force (  ) (delay ) (delay (force trace "happyToken Mismatch" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay (force )) (delay )))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseOne Mismatched" )))) (force  (force (force (  ) (delay ) (delay (force trace "phaseTwoInfo Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Input UTxO Has No Happy State Token" )))) (force  (force (force ) (\ -> \ -> \ -> \ -> force (force (   (force (force ) (\ -> \ -> \ -> \ -> ))) (delay ) (delay (force trace "Script Input & Output Must Be Equal" ))))) (force  (force (force (  1) (delay (force (force ( ( ) 1) (delay ) (delay (force ))))) (delay (force )))) (force )))))))))))))))))) (delay ) (delay (force trace "[ERROR]: FIRST DEVELOPER CLAIMS AT PHASE ONE" ))))) (delay error) (delay error) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force (force ifThenElse (equalsInteger (  ) )  ) (delay ) (delay (force trace "Wrong Amount Minted By Second Developer" )))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "Second Developer Must Sign Tx" )))) (force  (force (force (force  (force ) (force  (force  (force  ) ) (force  (force ) )) ) (delay ) (delay (force trace "Phase One Date Has Not Been Reached" )))) (force  (force (force  (delay (force trace "Phase One Tokens Were Minted By Second Dev" )) (delay ))) (force  (force (force (  ) (delay ) (delay (force trace "happyToken Mismatch" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay (force )) (delay )))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseOne Mismatched" )))) (force  (force (force (  ) (delay ) (delay (force trace "phaseTwoInfo Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Input UTxO Has No Happy State Token" )))) (force  (force (force ) (\ -> \ -> \ -> \ -> force (force (   (force (force ) (\ -> \ -> \ -> \ -> ))) (delay ) (delay (force trace "Script Input & Output Must Be Equal" ))))) (force  (force (force (  1) (delay (force (force ( ( ) 1) (delay ) (delay (force ))))) (delay (force )))) (force ))))))))))))))))))) (delay ) (delay (force trace "[ERROR]: SECOND DEVELOPER CLAIMS AT PHASE ONE" )))))))))) (\ -> delay (force trace "The Output UTxO Does Not Have Inlineeee Datum" )))))))) (\ -> delay (force  (\ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force (force ) (\ -> \ -> \ -> \ -> force (force  (delay (force trace "The Output UTxO Does Not Have Inline Datum" )) (\ -> delay (force ( ) (\ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> force (force ( ) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force  (delay (force (force (force ifThenElse (equalsInteger (  ) )  ) (delay ) (delay (force ))))) (delay (force (force (force ifThenElse (equalsInteger (  ) (addInteger  ))  ) (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "First Developer Must Sign Tx" )))) (force  (force (force (force  (force ) (force  (force  (force  ) ) (force  (force ) )) ) (delay ) (delay (force trace "Phase Two Date Has Not Been Reached" )))) (force  (force (force  (delay (force trace "Phase Two Tokens Were Minted By First Dev" )) (delay ))) (force  (force (force (  ) (delay ) (delay (force trace "happyToken Mismatch" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseOne Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseTwoClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay (force )) (delay )))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseTwoClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseTwo Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Input UTxO Has No Happy State Token" )))) (force  (force (force ) (\ -> \ -> \ -> \ -> force (force (   (force (force ) (\ -> \ -> \ -> \ -> ))) (delay ) (delay (force trace "Script Input & Output Must Be Equal" ))))) (force  (force (force (  1) (delay (force (force ( ( ) 1) (delay ) (delay (force ))))) (delay (force )))) (force ))))))))))))))))))))))) (delay ) (delay (force trace "[ERROR]: FIRST DEVELOPER CLAIMS AT PHASE TWO" ))))) (delay error) (delay error) (\ -> delay (force (force (force (force ( (delay (\ -> )))) (force  (force )) (\ -> ) (force  (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) )  ) (delay ) (delay (force trace "Wrong Minting Contract Currency Symbol/Policy ID" )))) (force  (force (force  (delay (force (force (force ifThenElse (equalsInteger (  ) )  ) (delay ) (delay (force ))))) (delay (force (force (force ifThenElse (equalsInteger (  ) (addInteger  ))  ) (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger (force (force ) ( (delay (\ -> ))) ( )) 1)  ) (delay ) (delay (force trace "Only 1 Token Burn/Mint Action Is Allowed" )))) (force  (force (force ( (force  (\ -> \ -> )) ( )) (delay ) (delay (force trace "Second Developer Must Sign Tx" )))) (force  (force (force (force  (force ) (force  (force  (force  ) ) (force  (force ) )) ) (delay ) (delay (force trace "Phase Two Date Has Not Been Reached" )))) (force  (force (force  (delay (force trace "Phase Two Tokens Were Minted By Second Dev" )) (delay ))) (force  (force (force (  ) (delay ) (delay (force trace "happyToken Mismatch" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseOneClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseOne Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "firstDevPhaseTwoClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay ) (delay (force ))))) (delay (force (force  (delay (force )) (delay )))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "secondDevPhaseTwoClaimAmount Mismatched" )))) (force  (force (force  (delay (force (force  (delay (force )) (delay )))) (delay (force (force  (delay ) (delay (force ))))))) (force  (force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force trace "dateOfPhaseTwo Mismatched" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Output UTxO Has No Happy State Token" )))) (force  (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> force (force ) (\ -> \ -> \ -> \ ->    ))) 1)  ) (delay ) (delay (force trace "SC Input UTxO Has No Happy State Token" )))) (force  (force (force ) (\ -> \ -> \ -> \ -> force (force (   (force (force ) (\ -> \ -> \ -> \ -> ))) (delay ) (delay (force trace "Script Input & Output Must Be Equal" ))))) (force  (force (force (  1) (delay (force (force ( ( ) 1) (delay ) (delay (force ))))) (delay (force )))) (force ))))))))))))))))))))))) (delay ) (delay (force trace "[ERROR]: SECOND DEVELOPER CLAIMS AT PHASE TWO" ))))))))))) (\ -> delay (force trace "The Output UTxO Does Not Have Inline Datum" ))))))))))) (\ -> (\ ->  ) ((\ -> ) (force (force ) (\ -> \ -> force (force  (delay ((\ -> error) ((\ -> ) (force trace "No Redeemer Found" )))) (\ -> \ -> delay (force  (\ -> \ -> (\ -> (\ -> force  (\ ->  ) (\ -> force (force (force ifThenElse (equalsByteString  )  ) (delay (force ifThenElse (equalsInteger (force ) 4) (\ -> delay (\ -> \ -> \ -> \ -> )) (\ -> force ifThenElse (equalsInteger (force ) 3) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> delay (\ -> \ -> \ -> \ -> )) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) )) (delay ( )))) (\ ->  ) (\ ->  )) (delay (force (force fstPair) (force )))) (delay (unConstrData ))))))))))))) (delay (force (force ( ) (\ -> delay (force  (\ -> \ -> ))) (delay ((\ -> error) ((\ -> ) (force trace "No Script Input" )))))))) (delay (force (force ( ) (delay ( ())) (\ -> \ -> delay (force (force  (delay ) (\ -> \ -> delay ( ()))))))))) ( ) (force ifThenElse (equalsInteger (force ) 4) (\ -> delay (\ -> \ -> \ -> \ -> )) (\ -> force ifThenElse (equalsInteger (force ) 3) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) ) (force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> delay (\ ->   )) ((\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> delay (\ ->             )) (force   (force headList (force ))) (force   (force headList (force ))) (force   (force headList (force ))) (force (force ) unBData (force ) (force headList (force ))) (force (force ) unBData (force ) (force headList (force ))) (force   (force headList (force ))) (force (force )  unIData (force headList (force ))) ((\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> force  ((\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> force  (force  unIData (force headList (force ))) ( (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force ))) ((\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> force  (force  unIData (force headList (force ))) ( (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force ))) (force  unBData (force headList (force ))) (force (force )  (\ -> ) (force headList (force ))) (force (force ) unBData (\ -> ) (force headList (force ))) ( (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force ))) ( (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) )) (delay ) (delay ((\ -> error) ((\ -> ) (force trace "PT5" )))))) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (delay (force (force fstPair) (force )))) (delay (unConstrData ))) (\ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> force (force (force (force ( (delay (\ -> )))) (force ) (\ -> force (force (force ifThenElse (equalsByteString  )  ) (delay (force  )) (delay (force )))) ) (\ -> delay ) (delay ))))) (delay (\ -> (\ -> \ ->  (unListData )) ((\ -> ) (force (force ) (\ -> \ -> force (force chooseList)  (\ -> force ) (\ -> force  ( (force headList )) ( (force tailList ))) )))))) (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> delay (\ ->   )) ( (force headList (force ))) ( (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> \ -> \ -> delay (\ ->     )) ( (force headList (force ))) (force (force ) unBData (force ) (force headList (force ))) ((\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> (\ -> delay (\ -> \ -> \ ->  )) (force headList (force (force sndPair) (force )))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> delay (\ -> \ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> delay (\ -> \ -> \ -> )) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) (delay (force (force fstPair) (force )))) (delay (unConstrData ))) (force headList (force ))) (force  unBData (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (delay (force (force ) unBData unIData))) (delay (delay (\ -> \ -> (\ -> \ ->  (unMapData )) ((\ -> ) (force (force ) (\ -> \ -> (\ -> force (force chooseList)  (\ -> force ) (\ -> force  (force (force ) ( (force (force fstPair) (force ))) ( (force (force sndPair) (force )))) ( (force tailList ))) ) (delay (force headList ))))))))) (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> delay (\ ->   )) ( (force headList (force ))) (force   (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (delay (\ -> \ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> force  ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> force ) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) (delay (force (force fstPair) (force )))) (delay (unConstrData ))))) (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 3) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> (\ -> delay (\ -> \ -> \ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) ) (delay (force (force fstPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> delay (\ ->   )) ( (force headList (force ))) (unIData (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> unBData (force headList (force (force sndPair) (force )))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (unConstrData )))) (\ -> (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 6) (\ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ -> )) (\ -> force ifThenElse (equalsInteger (force ) 5) (\ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ -> )) (\ -> force ifThenElse (equalsInteger (force ) 4) (\ -> (\ -> \ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ ->   )) (unBData (force headList (force ))) (unIData (force headList (force tailList (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 3) (\ -> (\ -> \ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ ->   )) (unBData (force headList (force ))) (unBData (force headList (force tailList (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> (\ -> \ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ ->   )) ( (force headList (force ))) (unBData (force headList (force tailList (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> (\ -> delay (\ -> \ -> \ -> \ -> \ -> \ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) ) ) ) ) (delay (force (force fstPair) (force )))) (delay (force (force sndPair) (force )))) (delay (force (force sndPair) (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> \ -> \ -> delay (\ -> \ ->    )) (unIData (force headList (force ))) (unIData (force headList (force ))) (unIData (force headList (force tailList (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> (\ -> delay (\ -> \ ->  )) ( (force headList (force (force sndPair) (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) (delay (force (force fstPair) (force )))) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> (\ -> delay (\ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> (\ -> delay (\ -> \ ->  )) (unBData (force headList (force (force sndPair) (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) (delay (force (force fstPair) (force )))) (delay (unConstrData )))) (delay (\ -> \ -> (\ -> (\ -> force ifThenElse (equalsInteger (force ) 2) (\ -> force ) (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> force  ( (force headList (force (force sndPair) (force ))))) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> delay (\ -> \ -> \ -> )) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) ) (delay (force (force fstPair) (force )))) (delay (unConstrData ))))) (delay (delay (\ -> \ -> force (force ) ((\ -> force  (\ -> \ -> force    ) (force  )) (force  (\ -> \ -> \ ->  ( )) (\ -> ))) (\ -> \ -> addInteger  1)  0)))) (\ -> force (force ( ) (\ -> delay (force  (\ -> \ -> force  (\ -> \ -> \ -> \ -> force  (\ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> force (force ( (delay (\ -> )))) (\ -> \ -> force  (\ -> \ -> \ -> \ -> force (force (force  (\ -> \ -> force  (\ -> \ -> (\ -> force  (\ -> force  (\ -> force (force (force ifThenElse (equalsByteString  )  ) (delay (force )) (delay ))) (\ -> )) (\ -> force  (\ -> ) (\ -> force (force (force ifThenElse (equalsByteString  )  ) (delay (force )) (delay ))))) (delay (force (force  (\ -> delay (force (force  (\ -> delay (force  (\ -> force  (\ -> force  (\ -> force  (\ ->   ) (\ -> )) (\ -> force  (\ -> ) (\ ->   ))) (\ -> \ -> \ -> )) (\ -> \ -> \ -> force  (\ -> ) (\ -> \ -> \ -> force (force (force ifThenElse (equalsInteger  )  ) (delay (force (force (force ifThenElse (equalsInteger  )  ) (delay (  )) (delay )))) (delay )))))) (delay )))) (delay (force (force  (\ -> delay ) (delay )))))))))) (delay (force   )) (delay )))) (force ) )))))) (delay ((\ -> error) ((\ -> ) (force trace "Lf" ))))))) (\ -> force  (\ -> \ -> force  (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> force  (\ -> force ) (\ -> force ) (\ -> force ) (\ -> force (force ( (delay (\ -> )))) (force ) (\ -> force  (\ -> \ -> force (force (force (force (force ifThenElse (equalsByteString (force  (\ -> \ -> )) (force  (\ -> \ -> )))  ) (delay (force ifThenElse (equalsInteger (force  (\ -> \ -> )) (force  (\ -> \ -> )))  )) (delay ))) (delay (force  )) (delay (force ))))) ))))) (delay (force  (\ -> \ -> force (force  (\ -> delay ) (delay ))) (force )))) (\ ->  (force ) )) ((\ -> ) (force (force ) (\ -> \ -> \ -> force (force  (delay ) (\ -> \ -> delay (force  (\ -> \ ->  (   ) )))))))) ((\ -> ) (force (force ) (\ -> \ -> \ -> \ -> force (force  (delay ) (\ -> \ -> delay (force  (\ -> \ -> force (force (force ifThenElse (equalsInteger  0)  ) (delay (   )) (delay (  (force  (delay (\ ->    )) ) ))))))))))) (delay (\ -> \ -> \ -> force  (\ -> \ -> force  (\ -> \ -> force  (\ -> \ -> force  (\ -> \ -> force (force (force    ) (delay (force (force  (delay (force (force  (delay (force    )) (delay )))) (delay (force    ))))) (delay ) (delay (force    )))))))))) (delay (\ -> \ -> delay (\ ->   )))) (delay (\ -> \ -> delay (\ ->   )))) (delay (\ -> \ -> \ -> force  (\ -> \ -> force  (\ -> \ -> force (force (force    ) (delay (force (force  (delay ) (delay )))) (delay ) (delay ))))))) (delay (\ -> \ -> delay (\ ->   )))) (delay (\ -> \ -> \ -> (\ -> (\ -> (\ -> (\ -> force (force  (\ -> delay (force (force  (\ -> delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay ))))))) (delay ) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay )))))))))) (delay (force (force  (\ -> delay ) (delay ) (delay )))) (delay (force (force  (\ -> delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay ))))))) (delay ) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay (force (force  (\ -> delay ( ())) (delay ( ())) (delay )))))))))))) (\ -> force (force  (\ -> delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay )))) (\ -> force (force  (\ -> delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay )))) (\ -> force (force  (\ -> delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay )))) (\ -> force (force  (\ -> delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay (force (force  (\ -> delay (force (force  (\ -> delay (force    )) (delay error) (delay error)))) (delay error) (delay )))) (delay )))))) (delay (\ -> delay (\ -> \ -> \ ->  ))) (delay (delay (\ -> \ -> \ -> )))) (delay (\ -> force  (\ -> \ -> \ -> \ -> \ -> \ -> \ -> \ -> )))) (\ -> \ -> \ -> force (force ( (delay (\ -> )))) (force  (force )) (\ -> force  (\ -> \ -> force (force ( (delay (\ -> )))) (force  (force )) (\ -> force  (\ -> \ -> force  (\ ->  0 ) (\ -> \ ->   ) (\ ->   0))) )) (force (force ( (delay (\ -> )))) (\ -> force  (\ -> \ -> force (force )  (force  (\ -> force (force ( (delay (\ -> )))) (\ -> force  (\ -> \ -> force (force )  (force (force ) ))) ) (\ -> \ -> force (force (force ))   ) (\ -> force (force ( (delay (\ -> )))) (\ -> force  (\ -> \ -> force (force )  (force (force ) ))) )))) (force (force (force ))   )))) (delay (delay (delay (\ -> \ -> \ -> force (force ( (delay (\ -> )))) (force ) (force (force ( (delay (\ -> )))) (\ -> force  (\ -> \ -> force (force )  (force (force ) ))) (force (force ( (delay (\ -> )))) (\ -> \ -> force  (\ -> \ -> force (force (force (force ( (delay (\ -> )))) ((\ -> force  (\ -> \ -> force  (\ -> \ -> )  ) (force  (\ -> \ -> ))) (delay (\ ->  (\ -> \ -> force (force  (delay ) (delay ))) ))) (\ -> force  (\ -> \ ->   )) ) (delay ) (delay (force   ))))) (force ) )) (force (force ( (delay (\ -> )))) (\ -> force  (\ -> \ -> (\ -> force (force )  ( )) ((\ -> ) (force (force ) (\ -> \ -> force (force  (delay (force (force ) )) (\ -> \ -> delay (force  (\ -> \ -> force (force (  ) (delay (delay (\ -> \ -> \ ->   ))) (delay ( )))))))))))) )))))) ((\ -> ) (force (force ) (\ -> \ -> delay (delay (\ -> \ -> \ -> force (force  (delay ) (\ -> \ -> delay (  (force (force ( (delay (\ -> ))))   )))))))))) (delay (delay (\ -> delay (\ -> \ -> \ ->  )))) (delay (delay (\ -> delay (\ -> \ -> \ ->  ))))) ((\ -> ) (force (force ) (\ -> \ -> delay (delay (\ -> \ -> force (force  (delay (force )) (\ -> \ -> delay (force  ( ) (force (force ( (delay (\ -> ))))  )))))))))) ((\ -> ) (force (force ) (\ -> \ -> delay (delay (\ -> \ -> \ -> force (force  (delay (force  )) (\ -> \ -> delay (force   ( ) (force (force ( (delay (\ -> ))))   )))))))))) (delay (\ -> force  (\ -> \ -> )))) (delay (\ -> force  (\ -> \ -> )))) (delay (delay (\ ->  (\ -> \ -> force (force  (delay ) (delay ))) )))) (delay (\ -> force  (\ -> \ -> force  (\ -> \ -> )  ) (force  (\ -> \ -> ))))) (delay (\ -> \ -> delay (\ ->   )))) (\ -> \ -> force  (\ -> \ ->    ))) (\ -> \ -> \ -> (\ -> (\ ->  ) ((\ -> ) (force (force ) (\ -> \ -> force  0 (\ -> \ -> force  (\ -> \ -> force (force (force ifThenElse (equalsByteString  )  ) (delay ( )) (delay ( ))))))))) ((\ -> ) (force (force ) (\ -> \ -> force  0 (\ -> \ -> force  (\ -> \ -> force (force (force ifThenElse (equalsByteString  )  ) (delay ) (delay ( )))))))))) (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> \ -> delay (\ ->    )) ((\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> force (force ) (unBData (force headList (force ))) (unBData (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force ))) ((\ -> (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> \ -> \ -> \ -> delay (\ ->      )) (unIData (force headList (force ))) ( (force headList (force ))) (unIData (force headList (force ))) ( (force headList (force ))) (unIData (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force ))) ((\ -> (\ -> (\ -> (\ -> (\ -> (\ -> force ifThenElse (equalsInteger (force (force fstPair) (force )) 0) (\ -> (\ -> \ -> \ -> \ -> \ -> delay (\ ->      )) (unIData (force headList (force ))) ( (force headList (force ))) (unIData (force headList (force ))) ( (force headList (force ))) (unIData (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData ))) (force headList (force tailList (force ))))) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) (delay (force tailList (force )))) (delay (force (force sndPair) (force )))) (delay (unConstrData )))) (\ -> (\ -> force ifThenElse (equalsInteger (force ) 1) (\ -> ) (\ -> force ifThenElse (equalsInteger (force ) 0) (\ -> ) (\ -> (\ -> error) ((\ -> ) (force trace  ))) ) ) (delay (force (force fstPair) (unConstrData ))))) "PT1") (delay (delay (\ ->   (\ -> \ -> force (force (force ifThenElse (equalsInteger  )  ) (delay ) (delay (force (force (force ifThenElse (lessThanEqualsInteger  )  ) (delay ) (delay )))))) (\ -> \ -> force ifThenElse (lessThanInteger  )  ) (\ -> \ -> force ifThenElse (lessThanEqualsInteger  )  ) (\ -> \ -> force ifThenElse (lessThanEqualsInteger  )  ) (\ -> \ -> force ifThenElse (lessThanInteger  )  ) (\ -> \ -> force (force (force ifThenElse (lessThanEqualsInteger  )  ) (delay ) (delay ))) (\ -> \ -> force (force (force ifThenElse (lessThanEqualsInteger  )  ) (delay ) (delay ))))))) (delay (\ -> \ -> \ -> )) (delay (\ -> \ -> \ -> )) (delay (\ -> \ -> \ -> ))) (\ -> \ -> (\ -> (\ -> force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> \ -> \ -> \ -> )) (force  (\ -> \ -> \ -> \ -> \ -> )))  ) (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay (force )) (delay ))))) (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay ) (delay (force )))))))))) (delay ))) (delay (force (force (force ifThenElse (equalsInteger (force  (\ -> \ -> \ -> \ -> \ -> )) (force  (\ -> \ -> \ -> \ -> \ -> )))  ) (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay (force )) (delay ))))) (delay (force  (\ -> \ -> \ -> \ -> \ -> force (force  (delay ) (delay (force )))))))))) (delay ))))) (delay (force ifThenElse (equalsInteger (force  (\ -> \ -> \ -> \ -> \ -> )) (force  (\ -> \ -> \ -> \ -> \ -> )))  )))) (\ -> \ -> force  (\ -> \ -> force  (\ -> \ -> force (force (force ifThenElse (equalsByteString  )  ) (delay (  )) (delay )))))) (\ -> \ -> force ifThenElse (equalsByteString  )  )) (\ -> \ -> (\ ->   0) ((\ -> ) (force (force ) (\ -> \ -> \ -> force (force  (delay (  )) (\ -> \ -> delay (force  (\ -> \ -> \ -> \ -> force (force  (delay (  )) (\ -> delay (  (addInteger  1))) (\ -> delay (  (addInteger  1))))))))))))) (\ -> \ -> (\ ->   0) ((\ -> ) (force (force ) (\ -> \ -> \ -> force (force  (delay (  )) (\ -> \ -> delay (force  (\ -> \ -> force  (\ -> \ -> \ -> \ -> force (force  (delay (  )) (\ -> delay (  (addInteger  1))) (\ -> delay (  (addInteger  1)))))))))))))) (\ -> \ -> force ifThenElse (equalsInteger  )  )) (\ -> force  (\ -> \ -> force  (\ -> ) (\ -> (\ -> error) ((\ -> ) (force trace "No PubKeyHash" )))))) (\ -> (\ -> error) ((\ -> ) (force trace "No Script Output" )))) ()) (delay (delay (\ -> \ -> ))) (delay (\ -> \ -> delay (\ -> \ ->   )))) (delay (delay (\ -> \ -> delay (\ ->   ))))) (delay (\ -> delay (\ -> \ ->  ))) (delay (delay (\ -> \ -> )))) (delay (\ -> ))) (delay (force trace "One Or More Dev Has Not Claim Their Token" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (force trace "One Or More Dev Has Not Claim Their Token" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (force trace "firstDevDidPhaseOne Mismatched" ))) (delay (force trace "secondDevDidPhaseOne Mismatched" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (force trace "firstDevDidPhaseOne Mismatched" ))) (delay (force trace "secondDevDidPhaseOne Mismatched" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (force trace "Wrong Amount Minted By First Developer" ))) (delay (force trace "firstDevDidPhaseOne Mismatched" ))) (delay (force trace "secondDevDidPhaseOne Mismatched" ))) (delay (force trace "firstDevDidPhaseTwo Mismatched" ))) (delay (force trace "secondDevDidPhaseTwo Mismatched" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (force trace "Wrong Amount Minted By Second Developer" ))) (delay (force trace "firstDevDidPhaseOne Mismatched" ))) (delay (force trace "secondDevDidPhaseOne Mismatched" ))) (delay (force trace "firstDevDidPhaseTwo Mismatched" ))) (delay (force trace "secondDevDidPhaseTwo Mismatched" ))) (delay (force trace "Incorrect Tx In/Out" ))) (delay (\ -> \ -> )) (delay (\ -> \ -> ))) (delay (delay (\ -> (\ ->  ) (\ -> \ ->  ( ) )))) #bdc24850053ddf1e0c53bf20a518dcc4dcc5200ac4adb0056a1ded5c))